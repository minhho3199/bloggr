{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Tree;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _context = require(\"./context\");\n\nvar _treeChildren = _interopRequireDefault(require(\"./treeChildren\"));\n\nvar _treeContainerUl = _interopRequireDefault(require(\"./styled/treeContainerUl\"));\n\nvar _getNode = _interopRequireDefault(require(\"./helpers/getNode\"));\n\nvar _useKeyNavigation2 = _interopRequireDefault(require(\"./hooks/useKeyNavigation\"));\n\nvar _useTreeNodesAsPlainList = _interopRequireDefault(require(\"./hooks/useTreeNodesAsPlainList\"));\n/**\n * A Tree is visualization of a structure hierarchy with nested elements. A branch can be expanded or collapsed or selected. This is a BETA version.\n * @category Layout\n */\n\n\nfunction Tree(props) {\n  var data = props.data,\n      onNodeExpand = props.onNodeExpand,\n      onNodeCheck = props.onNodeCheck,\n      onNodeSelect = props.onNodeSelect,\n      selectedNode = props.selectedNode,\n      className = props.className,\n      style = props.style,\n      id = props.id,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy;\n  var visibleNodes = (0, _useTreeNodesAsPlainList[\"default\"])(data);\n\n  var _useKeyNavigation = (0, _useKeyNavigation2[\"default\"])({\n    visibleNodes: visibleNodes,\n    selectedNode: selectedNode,\n    onNodeSelect: onNodeSelect,\n    onNodeExpand: onNodeExpand\n  }),\n      autoFocus = _useKeyNavigation.autoFocus,\n      focusedNode = _useKeyNavigation.focusedNode,\n      setFocusedNode = _useKeyNavigation.setFocusedNode,\n      clearFocusedNode = _useKeyNavigation.clearFocusedNode,\n      keyDownHandler = _useKeyNavigation.keyDownHandler;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_context.Provider, {\n    value: {\n      autoFocus: autoFocus,\n      focusedNode: focusedNode,\n      onPrivateFocusNode: setFocusedNode,\n      onPrivateBlurNode: clearFocusedNode,\n      onPrivateKeyDown: keyDownHandler\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_treeContainerUl[\"default\"], {\n    className: className,\n    style: style,\n    id: id,\n    role: \"tree\",\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel\n  }, /*#__PURE__*/_react[\"default\"].createElement(_treeChildren[\"default\"], {\n    data: data,\n    onNodeExpand: onNodeExpand,\n    onNodeCheck: onNodeCheck,\n    nodePath: [],\n    selectedNode: selectedNode,\n    onNodeSelect: onNodeSelect\n  })));\n}\n\nTree.propTypes = {\n  /** A array with the nodes of the Tree. This is a recursive shape that is used for render the nested nodes passed on children of the array.\n   */\n  data: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].node,\n    icon: _propTypes[\"default\"].node,\n    isExpanded: _propTypes[\"default\"].bool,\n    isLoading: _propTypes[\"default\"].bool,\n    isChecked: _propTypes[\"default\"].oneOf([true, false, 'indeterminate']),\n    children: _propTypes[\"default\"].array\n  })),\n\n  /** The action triggered when the user clicks in the tree node expand or collapse button. */\n  onNodeExpand: _propTypes[\"default\"].func,\n\n  /** The action triggered when the user clicks in the tree node checkbox. */\n  onNodeCheck: _propTypes[\"default\"].func,\n\n  /** The action triggered when the user clicks in the tree node label. */\n  onNodeSelect: _propTypes[\"default\"].func,\n\n  /** The tree node name. */\n  selectedNode: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** The id of the tree heading element. Set to the parent element of the tree who contains the tree nodes.\n   * No need to use \"ariaLabel\" atribute if this one apply */\n  ariaLabelledBy: _propTypes[\"default\"].string,\n\n  /** The label for the parent element of the tree who contains the tree nodes. Apply if no tree heading element present */\n  ariaLabel: _propTypes[\"default\"].string\n};\nTree.defaultProps = {\n  data: [],\n  onNodeExpand: function onNodeExpand() {},\n  onNodeCheck: function onNodeCheck() {},\n  onNodeSelect: function onNodeSelect() {},\n  selectedNode: undefined,\n  className: undefined,\n  style: undefined,\n  id: undefined,\n  ariaLabelledBy: undefined,\n  ariaLabel: undefined\n};\n/**\n * Add documentation.\n * @public\n */\n\nTree.getNode = _getNode[\"default\"];","map":{"version":3,"sources":["/Users/minhho3199/Documents/Code/bloggr/client/node_modules/react-rainbow-components/components/Tree/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","Tree","_react","_propTypes","_context","_treeChildren","_treeContainerUl","_getNode","_useKeyNavigation2","_useTreeNodesAsPlainList","props","data","onNodeExpand","onNodeCheck","onNodeSelect","selectedNode","className","style","id","ariaLabel","ariaLabelledBy","visibleNodes","_useKeyNavigation","autoFocus","focusedNode","setFocusedNode","clearFocusedNode","keyDownHandler","createElement","Provider","onPrivateFocusNode","onPrivateBlurNode","onPrivateKeyDown","role","nodePath","propTypes","arrayOf","shape","label","node","icon","isExpanded","bool","isLoading","isChecked","oneOf","children","array","func","string","object","defaultProps","undefined","getNode"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Tree;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _context = require(\"./context\");\n\nvar _treeChildren = _interopRequireDefault(require(\"./treeChildren\"));\n\nvar _treeContainerUl = _interopRequireDefault(require(\"./styled/treeContainerUl\"));\n\nvar _getNode = _interopRequireDefault(require(\"./helpers/getNode\"));\n\nvar _useKeyNavigation2 = _interopRequireDefault(require(\"./hooks/useKeyNavigation\"));\n\nvar _useTreeNodesAsPlainList = _interopRequireDefault(require(\"./hooks/useTreeNodesAsPlainList\"));\n\n/**\n * A Tree is visualization of a structure hierarchy with nested elements. A branch can be expanded or collapsed or selected. This is a BETA version.\n * @category Layout\n */\nfunction Tree(props) {\n  var data = props.data,\n      onNodeExpand = props.onNodeExpand,\n      onNodeCheck = props.onNodeCheck,\n      onNodeSelect = props.onNodeSelect,\n      selectedNode = props.selectedNode,\n      className = props.className,\n      style = props.style,\n      id = props.id,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy;\n  var visibleNodes = (0, _useTreeNodesAsPlainList[\"default\"])(data);\n\n  var _useKeyNavigation = (0, _useKeyNavigation2[\"default\"])({\n    visibleNodes: visibleNodes,\n    selectedNode: selectedNode,\n    onNodeSelect: onNodeSelect,\n    onNodeExpand: onNodeExpand\n  }),\n      autoFocus = _useKeyNavigation.autoFocus,\n      focusedNode = _useKeyNavigation.focusedNode,\n      setFocusedNode = _useKeyNavigation.setFocusedNode,\n      clearFocusedNode = _useKeyNavigation.clearFocusedNode,\n      keyDownHandler = _useKeyNavigation.keyDownHandler;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_context.Provider, {\n    value: {\n      autoFocus: autoFocus,\n      focusedNode: focusedNode,\n      onPrivateFocusNode: setFocusedNode,\n      onPrivateBlurNode: clearFocusedNode,\n      onPrivateKeyDown: keyDownHandler\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_treeContainerUl[\"default\"], {\n    className: className,\n    style: style,\n    id: id,\n    role: \"tree\",\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel\n  }, /*#__PURE__*/_react[\"default\"].createElement(_treeChildren[\"default\"], {\n    data: data,\n    onNodeExpand: onNodeExpand,\n    onNodeCheck: onNodeCheck,\n    nodePath: [],\n    selectedNode: selectedNode,\n    onNodeSelect: onNodeSelect\n  })));\n}\n\nTree.propTypes = {\n  /** A array with the nodes of the Tree. This is a recursive shape that is used for render the nested nodes passed on children of the array.\n   */\n  data: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].node,\n    icon: _propTypes[\"default\"].node,\n    isExpanded: _propTypes[\"default\"].bool,\n    isLoading: _propTypes[\"default\"].bool,\n    isChecked: _propTypes[\"default\"].oneOf([true, false, 'indeterminate']),\n    children: _propTypes[\"default\"].array\n  })),\n\n  /** The action triggered when the user clicks in the tree node expand or collapse button. */\n  onNodeExpand: _propTypes[\"default\"].func,\n\n  /** The action triggered when the user clicks in the tree node checkbox. */\n  onNodeCheck: _propTypes[\"default\"].func,\n\n  /** The action triggered when the user clicks in the tree node label. */\n  onNodeSelect: _propTypes[\"default\"].func,\n\n  /** The tree node name. */\n  selectedNode: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** The id of the tree heading element. Set to the parent element of the tree who contains the tree nodes.\n   * No need to use \"ariaLabel\" atribute if this one apply */\n  ariaLabelledBy: _propTypes[\"default\"].string,\n\n  /** The label for the parent element of the tree who contains the tree nodes. Apply if no tree heading element present */\n  ariaLabel: _propTypes[\"default\"].string\n};\nTree.defaultProps = {\n  data: [],\n  onNodeExpand: function onNodeExpand() {},\n  onNodeCheck: function onNodeCheck() {},\n  onNodeSelect: function onNodeSelect() {},\n  selectedNode: undefined,\n  className: undefined,\n  style: undefined,\n  id: undefined,\n  ariaLabelledBy: undefined,\n  ariaLabel: undefined\n};\n/**\n * Add documentation.\n * @public\n */\n\nTree.getNode = _getNode[\"default\"];"]},"metadata":{},"sourceType":"script"}