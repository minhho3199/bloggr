{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport history from \"../utils/history\";\nconst initialState = {\n  isLoading: false,\n  isRegisterSuccess: false,\n  error: undefined\n};\nconst registerSlice = createSlice({\n  name: \"Register\",\n  initialState,\n  reducers: {\n    registerStart(state) {\n      state.isLoading = true;\n    },\n\n    registerSuccess(state) {\n      state.isLoading = false;\n      state.isRegisterSuccess = true;\n    },\n\n    registerFailed(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    resetRegisterState(state) {\n      state.error = undefined;\n    }\n\n  }\n});\nexport default registerSlice.reducer;\nexport const {\n  registerStart,\n  registerSuccess,\n  registerFailed,\n  resetRegisterState\n} = registerSlice.actions;\nexport function* startRegister(action) {\n  try {\n    const {\n      email,\n      name,\n      password\n    } = action.payload;\n    const response = yield call(axios.post, \"/users/register\", {\n      email,\n      name,\n      password\n    });\n    yield put(registerSuccess());\n    localStorage.setItem(\"usertoken\", response.data);\n    history.push(\"/home\"); // yield call(history.push, \"/home\");\n  } catch (e) {\n    var _e$response;\n\n    if ((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data) {\n      yield put(registerFailed(e.response.data));\n    }\n  }\n}","map":{"version":3,"sources":["/Users/minhho3199/Documents/Code/bloggr/client/src/components/RegisterForm/registerSlice.js"],"names":["call","put","createSlice","axios","history","initialState","isLoading","isRegisterSuccess","error","undefined","registerSlice","name","reducers","registerStart","state","registerSuccess","registerFailed","action","payload","resetRegisterState","reducer","actions","startRegister","email","password","response","post","localStorage","setItem","data","push","e"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,iBAAiB,EAAE,KAFA;AAGnBC,EAAAA,KAAK,EAAEC;AAHY,CAArB;AAMA,MAAMC,aAAa,GAAGR,WAAW,CAAC;AAChCS,EAAAA,IAAI,EAAE,UAD0B;AAEhCN,EAAAA,YAFgC;AAGhCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KAHO;;AAIRS,IAAAA,eAAe,CAACD,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,MAAAA,KAAK,CAACP,iBAAN,GAA0B,IAA1B;AACD,KAPO;;AAQRS,IAAAA,cAAc,CAACF,KAAD,EAAQG,MAAR,EAAgB;AAC5BH,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,MAAAA,KAAK,CAACN,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,KAXO;;AAYRC,IAAAA,kBAAkB,CAACL,KAAD,EAAQ;AACxBA,MAAAA,KAAK,CAACN,KAAN,GAAcC,SAAd;AACD;;AAdO;AAHsB,CAAD,CAAjC;AAqBA,eAAeC,aAAa,CAACU,OAA7B;AACA,OAAO,MAAM;AACXP,EAAAA,aADW;AAEXE,EAAAA,eAFW;AAGXC,EAAAA,cAHW;AAIXG,EAAAA;AAJW,IAKTT,aAAa,CAACW,OALX;AAQP,OAAO,UAAUC,aAAV,CAAwBL,MAAxB,EAAgC;AACrC,MAAI;AACF,UAAM;AAAEM,MAAAA,KAAF;AAASZ,MAAAA,IAAT;AAAea,MAAAA;AAAf,QAA4BP,MAAM,CAACC,OAAzC;AACA,UAAMO,QAAQ,GAAG,MAAMzB,IAAI,CAACG,KAAK,CAACuB,IAAP,EAAa,iBAAb,EAAgC;AAAEH,MAAAA,KAAF;AAASZ,MAAAA,IAAT;AAAea,MAAAA;AAAf,KAAhC,CAA3B;AACA,UAAMvB,GAAG,CAACc,eAAe,EAAhB,CAAT;AACFY,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCH,QAAQ,CAACI,IAA3C;AACEzB,IAAAA,OAAO,CAAC0B,IAAR,CAAa,OAAb,EALE,CAMJ;AACC,GAPD,CAOE,OAAOC,CAAP,EAAU;AAAA;;AACV,uBAAIA,CAAC,CAACN,QAAN,gDAAI,YAAYI,IAAhB,EAAsB;AACpB,YAAM5B,GAAG,CAACe,cAAc,CAACe,CAAC,CAACN,QAAF,CAAWI,IAAZ,CAAf,CAAT;AACD;AACF;AACF","sourcesContent":["import { call, put } from \"redux-saga/effects\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport history from \"../utils/history\";\n\nconst initialState = {\n  isLoading: false,\n  isRegisterSuccess: false,\n  error: undefined,\n}\n\nconst registerSlice = createSlice({\n  name: \"Register\",\n  initialState,\n  reducers: {\n    registerStart(state) {\n      state.isLoading = true\n    },\n    registerSuccess(state) {\n      state.isLoading = false;\n      state.isRegisterSuccess = true;\n    },\n    registerFailed(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    resetRegisterState(state) {\n      state.error = undefined;\n    }\n  }\n});\n\nexport default registerSlice.reducer;\nexport const {\n  registerStart,\n  registerSuccess,\n  registerFailed,\n  resetRegisterState\n} = registerSlice.actions;\n\n\nexport function* startRegister(action) {\n  try {\n    const { email, name, password } = action.payload;\n    const response = yield call(axios.post, \"/users/register\", { email, name, password });\n    yield put(registerSuccess());\n\t\tlocalStorage.setItem(\"usertoken\", response.data);\n    history.push(\"/home\");\n\t\t// yield call(history.push, \"/home\");\n  } catch (e) {\n    if (e.response?.data) {\n      yield put(registerFailed(e.response.data));\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}